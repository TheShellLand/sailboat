#!/bin/bash
# SmartOS script for updating zone nic
#
# Program for setting DHCP and Static addresses
#
#
# alpha0.2
# 0xB4AE7C4C
#

function _setUUID(){

    # SET UUID
    echo "[*] List of VMs"

    if [ -f /opt/custom/bin/list-ip ]; then
        /opt/custom/bin/list-ip 
    else
        vmadm list -o uuid,nics.0.ip,nics.0.nic_tag,nics.1.ip,nics.1.nic_tag,state,type,alias,hostname -s nics.0.ip
    fi 

    read -p "Enter UUID> " UUID
    export UUID

}

function _setINTERFACE(){

    # SET INTERFACE
    echo "[*] Existing interfaces"
    dladm show-vnic
    INTERFACE=
    INTERFACE1=
    INTERFACE=$(vmadm get $UUID 2>/dev/null | json nics | json -a interface)
    INTERFACE1=$(vmadm get $UUID 2>/dev/null | json nics | json -a interface)
    if [ ! -z "$INTERFACE" ]; then INTERFACE=$INTERFACE; fi
    if [ ! -z "$INTERFACE1" ]; then INTERFACE=$INTERFACE1; fi
    echo ""
    read -p "Enter existing (or new) interface> ($INTERFACE) " NEWINTERFACE
    if [ ! -z "$NEWINTERFACE" ]; then export INTERFACE=$NEWINTERFACE; fi

}

function _setMAC(){

    # SET MAC
    echo "[*] Current nics"
    vmadm get $UUID 2>/dev/null | json nics
    vmadm info $UUID 2>/dev/null | json nics
    MAC=
    MAC1=
    MAC=$(vmadm get $UUID 2>/dev/null | json nics | json -a mac)
    MAC1=$(vmadm info $UUID 2>/dev/null | json nics | json -a mac)
    echo ""
    if [ ! -z "$MAC" ]; then MAC=$MAC; fi
    if [ ! -z "$MAC1" ]; then MAC=$MAC1; fi
    read -p "Enter mac> ($MAC) " NEWMAC
    if [ ! -z "$NEWMAC" ]; then export MAC=$NEWMAC; fi

}

function _setNICTAG(){

    # SET NIC TAG
    echo "[*] Existing nic tags"
    nictagadm list
    NIC_TAG=
    NIC_TAG1=
    NIC_TAG=$(vmadm get $UUID 2>/dev/null | json nics | json -a nic_tag)
    NIC_TAG1=$(vmadm info $UUID 2>/dev/null | json nics | json -a nic_tag)
    echo ""
    if [ ! -z "$NIC_TAG" ]; then NIC_TAG=$NIC_TAG; fi
    if [ ! -z "$NIC_TAG1" ]; then NIC_TAG=$NIC_TAG1; fi
    read -p "Enter nic tag> ($NIC_TAG) " NEWNIC_TAG
    if [ ! -z "$NEWNIC_TAG" ]; then export NIC_TAG=$NEWNIC_TAG; fi

}

function _DHCPconfig(){

# DHCP
vmadm update $UUID << EOF
{
  "update_nics": [
    {
      "mac": "$MAC",
      "nic_tag": "$NIC_TAG",
      "model": "virtio",
      "ip": "dhcp",
      "primary": true
    }
  ]
}
EOF

}


function _STATICconfig(){

    # IP
    read -p "IP Address> " IP_STATIC
    # NETMASK
    read -p "Netmask> " NETMASK
    # GATEWAY
    read -p "Gateway> " GATEWAY

# Static IP
vmadm update $UUID << EOF
{
  "update_nics": [
    {
      "mac": "$MAC",
      "nic_tag": "$NIC_TAG",
      "ip": "$IP_STATIC",
      "netmask": "$NETMASK",
      "gateway": "$GATEWAY",
      "primary": true
    }
  ]
}
EOF

}


function smartos_update_nic(){

    export TYPE=$1

    # UUID
    _setUUID

    # INTERFACE
    #_setINTERFACE
    #"interface": "$INTERFACE",

    # MAC
    _setMAC

    # NIC_TAG
    _setNICTAG

    # DHCP
    if [ $TYPE == DHCP ]; then
        _DHCPconfig
    fi

    # STATIC
    if [ $TYPE == STATIC ]; then
        _STATICconfig
    fi

    # UPDATE VM
    echo "[*] New nic"
    vmadm get $UUID 2>/dev/null | json nics
    vmadm info $UUID 2>/dev/null | json nics

exit 0

}



# MAIN

select TYPE in "DHCP" "STATIC"; do
    case $TYPE in
        DHCP) smartos_update_nic DHCP ;;
        STATIC) smartos_update_nic STATIC ;;
    esac
done
