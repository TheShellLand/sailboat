#!/usr/bin/env bash

print '
ICAgICAgICAgICAgICAvICAgICBcCiAgICAgICAgICAgICAgdnZ2dnZ2diAgL3xf
Xy98CiAgICAgICAgICAgICAgICAgSSAgIC9PLE8gICB8CiAgICAgICAgICAgICAg
ICAgSSAvX19fX18gICB8ICAgICAgL3wvfAogICAgICAgICAgICAgICAgSnwvXiBe
IF4gXCAgfCAgICAvMDAgIHwgICAgXy8vfAogICAgICAgICAgICAgICAgIHxeIF4g
XiBeIHxXfCAgIHwvXl5cIHwgICAvb28gfAogICAgICAgICAgICAgICAgICBcbV9f
X21fX3xffCAgICBcbV9tX3wgICBcbW1ffAoKICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICJUb3Rvcm9zIiAoZnJvbSAiTXkgTmVpZ2hib3Ig
VG90b3JvIikKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAtLS0gRHVrZSBMZWUKIAlBZGQgbmljcwoK' | openssl enc -base64 -d



function info(){
  vmadm list -o uuid,hostname,nics.0.ip,nics.0.nic_tag,nics.1.ip,nics.1.nic_tag,state,type,alias -s nics.0.ip

  while true; do
    read -p "Enter VM UUID: " UUID
    export UUID
    vmadm list | grep -w "$UUID" 2>/dev/null >/dev/null
      if [ $? == 0 ]; then
        BRAND=$(vmadm get "$UUID" | json -a brand)
        break
          else echo "UUID not found. Please check spelling and try again"; fi
  done
}


function spec_nics(){

  ### All properties also follow nic.*.<property>
  #
  #  global: interface
  #    Name of the interface within the VM ("net0")
  #    This is also set automatically
  #
  #  global: nic_tag
  #    nic_tag or interface name that the virtual NIC is attached to
  #    This option for a NIC determines which host NIC the VMs nic will be
  #    attached to. The value can be either a nic tag as listed in the 'NIC
  #    Names' field in `sysinfo`, or an etherstub or device name.
  #
  #  KVM: model
  #    Driver for this NIC (virtio, e1000, rtl8139)
  #
  #  global: ip
  #    IPv4 Address for NIC, or "dhcp"
  #
  #  global: gateway
  #    Gateway for NIC
  #
  #  global: netmask
  #    Netmask for NIC
  #
  #  global: primary
  #    Sets this NICs gateway as the default gw
  #
  ### Advanced nic configuration ###
  #
  #  global: allow_dhcp_spoofing
  #    With this property set to true, this VM will be able to operate as a
  #    DHCP server on this interface.  Without this, some of the packets
  #    required of a DHCP server will not get through.
  #
  #  global: allow_ip_spoofing
  #    With this property set to true, this VM will be able to send and
  #    receive packets over this nic that don't match the IP address
  #    specified by the ip property.
  #
  #  global: allow_mac_spoofing
  #     With this property set to true, this VM will be able to send packets
  #     from this nic with MAC addresses that don't match the mac property.
  #
  #  global: allow_restricted_traffic
  #     With this property set to true, this VM will be able to send
  #     restricted network traffic (packets that are not IPv4, IPv6, or ARP)
  #     from this nic.
  #
  #  KVM: allow_unfiltered_promisc
  #    With this property set to true, this VM will be able to have multiple
  #    MAC addresses (eg. running SmartOS with VNICs).  Without this option
  #    these packets will not be picked up as only those unicast packets
  #    destined for the VNIC's MAC will get through.  Warning: do not enable
  #    this option unless you fully understand the security implications.
  #
  #  global: blocked_outgoing_ports
  #    Array of ports on which this nic is prevented from sending traffic.
  #
  #  global: allowed_ips
  #    This sets additional IP addresses from which this nic is allowed to
  #    send traffic, in addition to the IPs in the ip and vrrp_primary_ip
  #    properties (if set). Values can be either single IPv4 Addresses or
  #    CIDR ranges in the form 192.168.1.0/24.
  #
  #  global: dhcp_server
  #    With this property set to true, this VM will be able to operate as a
  #    DHCP server on this interface.  Without this, some of the packets
  #    required of a DHCP server will not get through.



  INTERFACE_default=net0
  NICTAG_default=external
  MTU_default=1500
  IPADDRESS_default=unset
  GATEWAY_default=unset
  NETMASK_default=unset
  PRIMARY_default=unset



  while true; do

    # Removing this in future release, since interface is can be automatically created
    #read -p "Set VM internal NIC name (net0): " INTERFACE
    #if [ -z "$INTERFACE" ]; then INTERFACE=$INTERFACE_default; fi
    #echo ""

    echo "Select NIC type to use"
    select ANSWER in "NIC tag (default)" "etherstub"; do
      case $ANSWER in
        "NIC tag (default)")
          while true; do
            echo ""
            nictagadm list | head -1; nictagadm list | grep normal
            read -p "Set NIC tag for traffic to go over (external): " NICTAG
            if [ -z "$NICTAG" ]; then NICTAG=$NICTAG_default; fi
            if [ ! -z "$NICTAG" ]; then nictagadm list | grep -w "$NICTAG" 2>/dev/null >/dev/null
              if [ $? == 0 ]; then break
                else echo "NIC tag not found. Check spelling and try again"; fi
            fi
          done

          break ;;
          # Removing VNICS, SmartOS only allows nic tags and etherstubs
#        "virtual NIC")
#          while true; do
#            echo ""
#            dladm show-vnic
#            read -p "Set virtual NIC: " NICTAG
#            if [ -z "$NICTAG" ]; then echo "You must enter in a virtual NIC"; sleep 2
#              else dladm show-vnic | grep -w "$NICTAG" 2>/dev/null >/dev/null
#                if [ "$?" == 0 ]; then break
#                  else echo "Virtual NIC not found. Check spelling and try again"; fi
#            fi
#          done
##
#          break ;;
        etherstub)
          while true; do
            echo ""
            dladm show-etherstub
            read -p "Set etherstub: " NICTAG
            if [ -z "$NICTAG" ]; then echo "You must enter an etherstub"; sleep 2
              else dladm show-etherstub | grep -w "$NICTAG" 2>/dev/null >/dev/null
                if [ "$?" == 0 ]; then break
                  else echo "Etherstub not found. Check spelling and try again"; fi
            fi
          done

          break ;;
      esac
    done
    echo ""

    if [ -z "$PRIMARY_count" ]; then
      echo "Set NIC as default gw?"
      select ANSWER in "Yes (default)" "No"; do
        case $ANSWER in
          "Yes (default)")
            PRIMARY=true
            let PRIMARY_count++
            break ;;
          "No")
            PRIMARY=false

            break ;;
        esac
      done
      echo ""
    else
      PRIMARY=false
    fi

    echo "MTU"
    select ANSWER in "1500 (default)" "Custom"; do
      case $ANSWER in
        "1500 (default)")
          MTU=1500
          break ;;
        "Custom")
          while true; do
            read -p "MTU (1500): " MTU
            if [ -z "$MTU" ]; then MTU=1500; break; fi
          done
          break ;;
      esac
    done
    echo ""

    echo "Set addressing type"
    select ANSWER in "DHCP (default)" "Static"; do
      case $ANSWER in
        "DHCP (default)")
          IPADDRESS=dhcp
          break ;;
        "Static")
          while true; do
            read -p "IPv4: " IPADDRESS
            if [ -z "$IPADDRESS" ]; then echo "You must enter an IP"
              else break; fi
          done

          while true; do
            read -p "Gateway: " GATEWAY
            if [ -z "$GATEWAY" ]; then echo "You must enter a gateway IP"
              else break; fi
          done

          read -p "Netmask (255.255.255.0): " NETMASK
          if [ -z "$NETMASK" ]; then NETMASK="255.255.255.0"; fi

          break ;;
      esac
    done
    echo ""

    if [ "$BRAND" == kvm ]; then
      echo "Choose NIC Model: (virtio: best performance, but needs drivers; e1000 & rtl8139: more universal) "
      select ANSWER in "virtio (default)" "e1000" "rtl8139"; do
        case $ANSWER in
          "virtio (default)")
            NICMODEL="virtio"

            break ;;
          e1000)
            NICMODEL="e1000"

            break ;;
          rtl8139)
            NICMODEL="rtl8139"

            break ;;
        esac
      done; fi
      echo ""

    ### Advanced nic configurations ###

  #  global: dhcp_server
  #    With this property set to true, this VM will be able to operate as a
  #    DHCP server on this interface.  Without this, some of the packets
  #    required of a DHCP server will not get through.
  #
  #  global: allow_dhcp_spoofing
  #    With this property set to true, this VM will be able to operate as a
  #    DHCP server on this interface.  Without this, some of the packets
  #    required of a DHCP server will not get through.

    echo "Allow DHCP Spoofing?"
    select ANSWER in "Yes" "No (default)"; do
      case $ANSWER in
        Yes)
          DHCP=true
          DHCP_SPOOF=true

          break ;;
        "No (default)")
          DHCP=false
          DHCP_SPOOF=false

          break ;;
      esac
    done
    echo ""

  #
  #  global: allow_ip_spoofing
  #    With this property set to true, this VM will be able to send and
  #    receive packets over this nic that don't match the IP address
  #    specified by the ip property.

    echo "Allow IP Spoofing?"
    select ANSWER in "Yes" "No (default)"; do
      case $ANSWER in
        Yes)
          IP_SPOOF=true

          break ;;
        "No (default)")
          IP_SPOOF=false

          break ;;
      esac
    done
    echo ""

  #  global: allow_mac_spoofing
  #     With this property set to true, this VM will be able to send packets
  #     from this nic with MAC addresses that don't match the mac property.

    echo "Allow MAC Spoofing?"
    select ANSWER in "Yes" "No (default)"; do
      case $ANSWER in
        Yes)
          MAC_SPOOF=true

          break ;;
        "No (default)")
          MAC_SPOOF=false

          break ;;
      esac
    done
    echo ""

  #  global: allow_restricted_traffic
  #     With this property set to true, this VM will be able to send
  #     restricted network traffic (packets that are not IPv4, IPv6, or ARP)
  #     from this nic.
  #
  #  KVM: allow_unfiltered_promisc
  #    With this property set to true, this VM will be able to have multiple
  #    MAC addresses (eg. running SmartOS with VNICs).  Without this option
  #    these packets will not be picked up as only those unicast packets
  #    destined for the VNIC's MAC will get through.  Warning: do not enable
  #    this option unless you fully understand the security implications.
  #
  #  global: blocked_outgoing_ports
  #    Array of ports on which this nic is prevented from sending traffic.
  #
  #  global: allowed_ips
  #    This sets additional IP addresses from which this nic is allowed to
  #    send traffic, in addition to the IPs in the ip and vrrp_primary_ip
  #    properties (if set). Values can be either single IPv4 Addresses or
  #    CIDR ranges in the form 192.168.1.0/24.

    ### END Advanced nic configurations ###

    echo "[!] Your Configuration"
    #echo ">> Interface:" "$INTERFACE"
    echo "{-} NIC Tag:" "$NICTAG"
    echo "{-} MTU:" "$MTU"
    if [ "$BRAND" == kvm ]; then echo "{-} NIC Model:" "$NICMODEL"; fi
    echo "{-} IPv4:" "$IPADDRESS"
    if [ ! "$IPADDRESS" == dhcp ]; then echo "{-} Gateway:" "$GATEWAY"; fi
    if [ ! "$IPADDRESS" == dhcp ]; then echo "{-} Netmask:" "$NETMASK"; fi
    echo "{-} Primary NIC:" "$PRIMARY"
    if [ ! -z "$DHCP" ]; then echo "{-} DHCP: " "$DHCP"; fi
    if [ ! -z "$DHCP_SPOOF" ]; then echo "{-} DHCP Spoofing: " "$DHCP_SPOOF"; fi
    if [ ! -z "$IP_SPOOF" ]; then echo "{-} IP Spoofing: " "$IP_SPOOF"; fi
    if [ ! -z "$MAC_SPOOF" ]; then echo "{-} MAC Spoofing: " "$MAC_SPOOF"; fi


    echo ""
    echo "Confirm?"
    select ANSWER in "Done" "There's something wrong"; do
      case $ANSWER in
        "Done")
          FINISHED="true"

          break ;;
        "There's something wrong")
          FINISHED="false"

          break ;;
      esac
    done

    if [ "$FINISHED" == true ]; then break; fi
  done
  echo ""


  # JSON
  if [ "$BRAND" == joyent ]; then
    if [ "$IPADDRESS" == dhcp ]; then
      vmadm update "$UUID" << EOF
{
  "add_nics": [
    {
      "nic_tag": "$NICTAG",
      "mtu": "$MTU",
      "ip": "$IPADDRESS",
      "dhcp_server": $DHCP,
      "allow_dhcp_spoofing": $DHCP_SPOOF,
      "allow_ip_spoofing": $IP_SPOOF,
      "allow_mac_spoofing": $MAC_SPOOF,
      "primary": $PRIMARY
    }
  ]
}
EOF
    else
      vmadm update "$UUID" << EOF
{
  "add_nics": [
    {
      "nic_tag": "$NICTAG",
      "mtu": "$MTU",
      "ip": "$IPADDRESS",
      "gateway": "$GATEWAY",
      "netmask": "$NETMASK",
      "dhcp_server": $DHCP,
      "allow_dhcp_spoofing": $DHCP_SPOOF,
      "allow_ip_spoofing": $IP_SPOOF,
      "allow_mac_spoofing": $MAC_SPOOF,
      "primary": $PRIMARY
    }
  ]
}
EOF
  fi; fi

  # JSON
  if [ "$BRAND" == lx ]; then
    if [ "$IPADDRESS" == dhcp ]; then
      vmadm update "$UUID" << EOF
{
  "add_nics": [
    {
      "nic_tag": "$NICTAG",
      "mtu": "$MTU",
      "ip": "$IPADDRESS",
      "dhcp_server": $DHCP,
      "allow_dhcp_spoofing": $DHCP_SPOOF,
      "allow_ip_spoofing": $IP_SPOOF,
      "allow_mac_spoofing": $MAC_SPOOF,
      "primary": $PRIMARY
    }
  ]
}
EOF
    else
      vmadm update "$UUID" << EOF
{
  "add_nics": [
    {
      "nic_tag": "$NICTAG",
      "mtu": "$MTU",
      "ip": "$IPADDRESS",
      "gateway": "$GATEWAY",
      "netmask": "$NETMASK",
      "dhcp_server": $DHCP,
      "allow_dhcp_spoofing": $DHCP_SPOOF,
      "allow_ip_spoofing": $IP_SPOOF,
      "allow_mac_spoofing": $MAC_SPOOF,
      "primary": $PRIMARY
    }
  ]
}
EOF
  fi; fi

  # JSON
  if [ "$BRAND" == kvm ]; then
    if [ "$IPADDRESS" == dhcp ]; then
      vmadm update "$UUID" << EOF
{
  "add_nics": [
    {
      "nic_tag": "$NICTAG",
      "mtu": "$MTU",
      "model": "$NICMODEL",
      "ip": "$IPADDRESS",
      "dhcp_server": $DHCP,
      "allow_dhcp_spoofing": $DHCP_SPOOF,
      "allow_ip_spoofing": $IP_SPOOF,
      "allow_mac_spoofing": $MAC_SPOOF,
      "primary": $PRIMARY
    }
  ]
}
EOF
    else
      vmadm update "$UUID" << EOF
{
  "add_nics": [
    {
      "nic_tag": "$NICTAG",
      "mtu": "$MTU",
      "model": "$NICMODEL",
      "ip": "$IPADDRESS",
      "gateway": "$GATEWAY",
      "netmask": "$NETMASK",
      "dhcp_server": $DHCP,
      "allow_dhcp_spoofing": $DHCP_SPOOF,
      "allow_ip_spoofing": $IP_SPOOF,
      "allow_mac_spoofing": $MAC_SPOOF,
      "primary": $PRIMARY
    }
  ]
}
EOF
  fi; fi

  return $?

}



# main
info
spec_nics