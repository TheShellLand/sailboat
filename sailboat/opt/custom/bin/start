#!/bin/bash
# SmartOS script starting VMs
#
# There comes a time when you start a VM and want to know how to connect to it
# You could run the commands separately, or just use this and tell it the UUID
# and it'll do the rest for you
#
# alpha0.2
# 0xB4AE7C4C Eric Jaw
#


function startvm(){

    vmadm list -s state
    while true; do
    read -p "Enter VM UUID: " UUID
    export UUID
    vmadm list | grep -w "$UUID" 2>/dev/null >/dev/null
      if [ $? == 0 ]; then
        BRAND=$(vmadm get "$UUID" | json -a brand)
        break
          else echo "UUID not found. Please check spelling and try again"; fi
    done
    echo ""

    if [ "$BRAND" == kvm ]; then
    echo "Boot from ISO?"
    select ANSWER in "Yes" "No"; do
        case $ANSWER in
            Yes)
                echo ""
                array=($(ls /zones/"$UUID"/root | grep .iso))
                [[ -z "$array" ]]; iso_copy

                while true; do
                    echo "Set ISO"
                    select ISO in ${array[@]}; do
                    ls /zones/"$UUID"/root | grep -w "$ISO" 2>/dev/null >/dev/null
                    if [ $? == 0 ]; then
                        echo ""
                        echo "Attach virtio ISO?"
                        select ANSWER in "Yes" "No"; do
                            case $ANSWER in
                                Yes)
                                    echo ""
                                    echo "Select virtio"
                                    select VIRTIO in ${array[@]}; do
                                        echo ""
                                        [[ ! `vmadm get "$UUID"| json state` == running ]]; vmadm stop -F "$UUID"
                                        echo "[*]" vmadm start "$UUID" order=cd,once=d cdrom=/"$ISO",ide cdrom=/"$VIRTIO",ide
                                        vmadm start "$UUID" order=cd,once=d cdrom=/"$ISO",ide cdrom=/"$VIRTIO",ide
                                        break
                                    done
                                    break ;;
                                No)
                                    echo "[*]" vmadm start "$UUID" order=cd,once=d cdrom=/"$ISO",ide
                                    vmadm start "$UUID" order=cd,once=d cdrom=/"$ISO",ide
                                    break ;;
                            esac
                        done
                        break

                        else echo "ISO not found. Check spelling and try again"; fi
                    done
                    break
                done

                break ;;
            No) break ;;
        esac
    done
    fi
    echo ""

    while true; do
        vmadm start "$UUID"
        while true; do
          echo "[*] Awaiting network"
          if [ "$BRAND" == joyent ]; then
            echo ""
            echo "[*] ipadm show-addr"
            zlogin "$UUID" ipadm show-addr
            echo ""
            echo "[*] netstat -rn"
            zlogin "$UUID" netstat -rn; fi
          if [ "$BRAND" == lx ]; then
            echo ""
            echo "[*] /sbin/ip a"
            zlogin "$UUID" /sbin/ip a
            echo ""
            echo "[*] /bin/netstat -rn"
            zlogin "$UUID" /bin/netstat -rn; fi
          if [ "$BRAND" == kvm ]; then
            echo ""
            echo "[*] VNC"
            vmadm info "$UUID" vnc; fi
          echo ""
          read -p "Press enter to refresh network lookup, or type quit " ANSWER
          if [ "$ANSWER" == quit ]; then break; fi
        done
    done
    echo ""
    return $?

}

function iso_copy(){

  # Selects and copies an ISO to the KVM root for booting
  # e.g. Windows

  # Optional: Attaching virtio driver iso

  ISOS=/opt/custom/iso
  ISO=($(ls "$ISOS" | grep .iso))
  VIRTIOS=$ISOS/virtio
  VIRTIO=($(ls "$VIRTIOS" | grep .iso))

  if [ ! -d "$ISOS" ]; then mkdir -p "$ISOS"; fi
  if [ ! -d "$VIRTIOS" ]; then mkdir -p "$VIRTIOS"; fi

  ls -l "$ISOS" | grep ^[-l] 2>/dev/null >/dev/null
  if [ $? == 1 ]; then echo "[!] No ISO found in $ISOS"; echo ""; return $?; fi

  ls -l "$VIRTIOS" | grep ^[-l] 2>/dev/null >/dev/null
  if [ $? == 1 ]; then echo "[!] No virtio drivers found in $VIRTIOS"; echo ""; fi

  while true; do
    echo ""
    if [ ! -z "$UUID" ]; then vmadm list | grep -w "$UUID"
      if [ $? == 0 ]; then break
        else echo "UUID not found. Check spelling and try again"; fi
    fi
  done
  echo ""

  echo "Select an ISO"
  select ANSWER in "${ISO[@]}"; do
    ISO="$ANSWER"
    echo ""
    echo Copying "$ISO" "==>" /zones/"$UUID"/root/
    echo ""
    rsync -ih --copy-links --progress $ISOS/"$ISO" /zones/"$UUID"/root/
    break
  done
  echo ""

  echo "Boot?"
  select ANSWER in "Yes" "No"; do
    case $ANSWER in
      Yes)
        echo ""
        echo "Attach virtio ISO?"
        select ANSWER in "Yes" "No"; do
          case $ANSWER in
            Yes)
              echo ""
              echo "Select virtio iso"
              select ANSWER in "${VIRTIO[@]}"; do
                VIRTIO="$ANSWER"
                echo ""
                echo Copying "$VIRTIO" "==>" /zones/"$UUID"/root/
                echo ""
                rsync -ih --copy-links --progress $VIRTIOS/"$VIRTIO" /zones/"$UUID"/root/
                echo "[*] vmadm start "$UUID" order=cd,once=d cdrom=/"$ISO",ide cdrom=/"$VIRTIO",ide"
                vmadm start "$UUID" order=cd,once=d cdrom=/"$ISO",ide cdrom=/"$VIRTIO",ide
                break
              done
              break ;;

            No) break ;;
          esac
        done

        echo "[*] vmadm start "$UUID" order=cd,once=d cdrom=/"$ISO",ide"
        vmadm start "$UUID" order=cd,once=d cdrom=/"$ISO",ide
        break ;;
      No) break ;;
    esac
  done
  echo ""

  return $?

}


function pretty_term(){
clear

print '
CiAgICAgICAgICAgICAgICAgXCAgICAgLwogICAgICAgICAgICAgXCAgICBvIF4g
byAgICAvCiAgICAgICAgICAgICAgIFwgKCAgICAgKSAvCiAgICBfX19fX19fX19f
X18oJSUlJSUlJSlfX19fX19fX19fX18KICAgKCAgICAgLyAgIC8gICklJSUlJSUl
KCAgXCAgIFwgICAgICkKICAgKF9fXy9fX18vX18vICAgICAgICAgICBcX19cX19f
XF9fXykKICAgICAgKCAgICAgLyAgLyglJSUlJSUlKVwgIFwgICAgICkKICAgICAg
IChfXy9fX18vICglJSUlJSUlKSBcX19fXF9fKQogICAgICAgICAgICAgICAvKCAg
ICAgICApXAogICAgICAgICAgICAgLyAgICglJSUlJSkgICBcCiAgICAgICAgICAg
ICAgICAgICglJSUpCiAgICAgICAgICAgICAgICAgICAgIQoKICAgIFNtYXJ0T1Mg
Vk0gQm9vdGVyCgo=' | \
openssl enc -base64 -d

}

# main

pretty_term
startvm
