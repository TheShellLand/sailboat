#!/bin/sh
# SmartOS script creating VMs
#
# Provides an easy to use script for creating LX, Joyent, and KVM zones
# This de-encumbers the use of manual typing and creates json vm spec automatically
# Also, I stopped wanting to refer to an endless number of json files for figuring out what options to use for which
#  type of VM I was creating
#
#
# alpha0.1
# 0xB4AE7C4C
#


function _EasyTiger(){

  export DIFFICULTY=$1

  choose_vm_type

}

function choose_vm_type(){

  # LX, OS, or KVM
  echo "Select a VM type"
  select type in "SmartOS - Native, allows RAM over provisioning" "LX - Native, runs linux flavors, yum" "KVM - Windows, Mac OS X, any ISO"; do
    case option in
      "OS - Native, allows RAM over provisioning") create_vm_smartos; return $? ;;
      "LX - Native, runs linux flavors, yum") create_vm_lx; return $? ;;
      "KVM - Linux image") create_vm_kvm; return $? ;;
      "ISO - Windows, Mac OS X, any ISO") create_vm_kvm; return $? ;;
    esac
  done

}

function create_vm_smartos(){

  # Create Joyent SmartOS zone VM
  vmadm create << EOF
{
  "nics": [{"interface": "$INTERFACE", "nic_tag": "$NICTAG", "model": "$NICMODEL", "ip": "$IPADDRESS", "gateway": "$GATEWAY", "netmask": "$NETMASK", "primary": $PRIMARY}],
  "resolvers": ["$DNS_PRIMARY", "$DNS_SECONDARY"],
  "image_uuid": "$IMAGE_UUID",
  "quota": "$DISK_QUOTA",
  "cpu_cap": $CPU_CAP,
  "max_physical_memory": $MAX_MEM,
  "autoboot": $AUTOBOOT,
  "alias": "$ALIAS",
  "brand": "joyent"
}
EOF

}


function create_vm_lx(){

  # Create LX VM
  vmadm create << EOF
{
  "nics": [{"interface": "$INTERFACE", "nic_tag": "$NICTAG", "model": "$NICMODEL", "ip": "$IPADDRESS", "gateway": "$GATEWAY", "netmask": "$NETMASK", "primary": $PRIMARY}],
  "resolvers": ["$DNS_PRIMARY", "$DNS_SECONDARY"],
  "image_uuid": "$IMAGE_UUID",
  "quota": "$DISK_QUOTA",
  "cpu_cap": $CPU_CAP,
  "max_physical_memory": $MAX_MEM,
  "autoboot": $AUTOBOOT,
  "alias": "$ALIAS",
  "kernel_version": "3.13.0",
  "brand": "lx"
}
EOF

}


function create_vm_kvm(){

  # Create KVM VM
  vmadm create << EOF
{
  "nics": [{"interface": "$INTERFACE", "nic_tag": "$NICTAG", "model": "virtio, e1000, rtl8139", "ip": "$IPADDRESS", "gateway": "$GATEWAY", "netmask": "$NETMASK", "primary": true}],
  "resolvers": ["$DNS_PRIMARY", "$DNS_SECONDARY"],
  "disks": [{"image_uuid": "3162a91e-8b5d-11e2-a78f-9780813f9142", "model": "virtio | ide | scsi", "compression": "on,off,lzjb,gzip,gzip-N,zle", "boot": true}],
  "vcpus": "number of VCPU",
  "ram": number in MB,
  "autoboot": true|false,
  "alias": "string",
  "brand": "kvm"
}
EOF

}


function create_vm_spec_kvm_image_import(){

  # Required:
  # $importedUUID

  # Create KVM VM from Imported Image
  vmadm create << EOF
{
  "brand": "kvm",
  "resolvers": ["$DNS_PRIMARY","$DNS_SECONDARY"],
  "ram": "$RAM",
  "max_locked_memory": "$RAM_MAX",
  "vcpus": "$VCPU",
  "nics": [
    {
      "nic_tag": "admin",
      "model": "virtio",
      "ip": "dhcp",
      "primary": true
    }
  ],
  "disks": [
    {
      "image_uuid": "$importedUUID",
      "boot": true,
      "model": "virtio"
    }
  ]
}
EOF

}




# MAIN

echo "How would you like to create your VM today?"
select TYPE in "Just the simple essentials!" "I want to see all the options!"; do
    case $TYPE in
        "Just the simple essentials!") _EasyTiger EASY
        # Choose VM type
        # Choose DHCP or Static, nic tag
        #
        ;;
        "I want to see all the options!") _EasyTiger HARD
        # Choose VM type
        # Choose DHCP or Static, phys, nic tag, interface, etherstub, vnic
        #  - all ipadm ifprop, addrprop, and prop
        #
        ;;
    esac
done
