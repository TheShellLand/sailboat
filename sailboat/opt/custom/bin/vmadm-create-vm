#!/bin/sh
# SmartOS script creating VMs
#
# Provides an easy to use script for creating LX, OS, and KVM zones
# This de-encumbers the use of manual typing and creates json vm spec automatically
# Also, I stopped wanting to refer to an endless number of json files for figuring out what options to use for which
#  type of VM I was creating
#
#
# alpha0.1
# 0xB4AE7C4C
#


function _EasyTiger(){

  export DIFFICULTY=$1

  choose_vm_type
  return $?

}


function pre_check(){

  # Location for new VM specs
  NEW_VM_SPECS="/opt/custom/json/new_vm_specs"
  echo "[*] New specs located in: $NEW_VM_SPECS"
  if [ ! -d "$NEW_VM_SPECS" ]; then mkdir -p "$NEW_VM_SPECS"; fi
  # New temp filename
  TEMPNAME="$(uuid).temp.json"
  export TEMPNAME
  return $?

}


function choose_vm_type(){

  # LX, OS, or KVM
  echo "Select a VM type"
  select type in "OS - Native, allows RAM over provisioning" "LX - Native, runs linux flavors, yum" "KVM - Linux image" "ISO - Windows, Linux, Mac, any ISO"; do
    case option in
      "OS - Native, allows RAM over provisioning") create_vm os ; return $? ;;
      "LX - Native, runs linux flavors, yum") create_vm lx; return $? ;;
      "KVM - Linux image") create_vm kvm; return $? ;;
      "ISO - Windows, Linux, Mac, any ISO") create_vm iso; return $? ;;
    esac
  done
  return $?

}


function create_vm(){

  TYPE="$1"
  export TYPE

  if [ "$TYPE" == "os" ]; then create_vm_os; return $?; fi
  if [ "$TYPE" == "lx" ]; then create_vm_lx; return $?; fi
  if [ "$TYPE" == "iso" ]; then create_vm_iso; return $?; fi
  if [ "$TYPE" == "kvm" ]; then create_vm_kvm; return $?; fi
  return $?

}


function text_sanitize(){

  # Sanatizes input, removes all spaces, and non-alphanumeric charaters, also allows underscores
  # Used mainly for new_vm_filename()

  STRING="$1"
  CLEAN=${STRING// /}
  CLEAN=${CLEAN//[^a-zA-Z0-9_]/}
  output_sanatized="$CLEAN"
  export output_sanatized
  return $?

}


function new_vm_filename(){

  # Naming scheme for the new VM spec file: type_alias_(link)(vnics).json
  # (e.g. os__elasticdb__elastic0eshard0.json, kvm__win__nat0external0__sql0internal0.json)
  # All text will run though text_sanitize(); only characters allowed are regex [a-zA-Z0-9_]

  text_sanitize "$1"
  CHOMP="$output_sanatized"

  if [ -z "$CHOMP" ]; then VM_FILENAME=""; export VM_FILENAME; return $?; fi
  if [ -z "$VM_FILENAME" ]; then VM_FILENAME="$CHOMP"; export VM_FILENAME; return $?; fi
  if [ ! -z "$VM_FILENAME" ]; then VM_FILENAME="$VM_FILENAME"__"$CHOMP"; export VM_FILENAME; return $?; fi
  if [ "$CHOMP" == ".json" ]; then VM_FILENAME="$VM_FILENAME".json; export VM_FILENAME; return $?; fi
  return $?

}
function temp_vm_spec(){

  # All VM specs write input to this temporary file
  touch $TEMPNAME
  if [ -z $1 ]; then
    cat > $TEMPNAME <<EOF
{
EOF
  fi

  if [ ! -z "$1" ]; then
    cat >> $TEMPNAME <<EOF
$1
EOF
  fi
  return $?

}

function vm_spec_nics(){

  cat >> $TEMPNAME <<EOF
"nics": [{"interface": "$INTERNAL_IF_NAME", "nic_tag": "$NICTAG", "model": "$NICMODEL", "ip": "$IPADDRESS", "gateway": "$GATEWAY", "netmask": "$NETMASK", "primary": $PRIMARY}],
EOF

}
function vm_spec_resolvers(){


  cat >> $TEMPNAME <<EOF
"resolvers": ["$DNS_PRIMARY", "$DNS_SECONDARY"],
EOF
}
vm_spec_image_uuid(){

  "image_uuid": "$IMAGE_IMPORT_UUID",

}


function os_spec(){


}

function lx_spec(){


}

function kvm_spec(){


}

function create_vm_os(){

  # Create OS zone VM
  vmadm create << EOF
{
  "nics": [{"interface": "$INTERNAL_IF_NAME", "nic_tag": "$NICTAG", "model": "$NICMODEL", "ip": "$IPADDRESS", "gateway": "$GATEWAY", "netmask": "$NETMASK", "primary": $PRIMARY}],
  "resolvers": ["$DNS_PRIMARY", "$DNS_SECONDARY"],
  "image_uuid": "$IMAGE_IMPORT_UUID",
  "quota": "$DISK_IN_GiB",
  "cpu_cap": $CPU_CAP,
  "max_physical_memory": $MAX_MEM_IN_MB,
  "autoboot": $AUTOBOOT,
  "alias": "$ALIAS",
  "brand": "joyent"
}
EOF
  return $?

}


function create_vm_lx(){

  # Create LX VM
  vmadm create << EOF
{
  "nics": [{"interface": "$INTERNAL_IF_NAME", "nic_tag": "$NICTAG", "model": "$VIRTIO_E1000_RTL8139", "ip": "$IPADDRESS", "gateway": "$GATEWAY", "netmask": "$NETMASK", "primary": $PRIMARY}],
  "resolvers": ["$DNS_PRIMARY", "$DNS_SECONDARY"],
  "image_uuid": "$IMAGE_IMPORT_UUID",
  "quota": "$DISK_IN_GiB",
  "cpu_cap": $CPU_CAP,
  "max_physical_memory": $MAX_MEM_IN_MB,
  "autoboot": $TRUE_FALSE,
  "alias": "$ALIAS",
  "kernel_version": "3.13.0",
  "brand": "lx"
}
EOF
  return !?

}


function create_vm_kvm(){

  # Create KVM VM
  vmadm create << EOF
{
  "nics": [{"interface": "$INTERFACE", "nic_tag": "$NICTAG", "model": "$VIRTIO_E1000_RTL8139", "ip": "$IPADDRESS", "gateway": "$GATEWAY", "netmask": "$NETMASK", "primary": true}],
  "resolvers": ["$DNS_PRIMARY", "$DNS_SECONDARY"],
  "disks": [{"image_uuid": "$IMAGE_UUID", "boot": $BOOTABLE, "model": "$DISK_MODEL", "compression": "$COMPRESSION"}],
  "vcpus": "$VCPU",
  "ram": $RAM_IN_MB,
  "autoboot": $AUTO_BOOT,
  "alias": "$ALIAS",
  "brand": "kvm"
}
EOF
  return $?

}


function create_vm_iso(){

  # Create ISO VM
  vmadm create << EOF
{
  "nics": [{"interface": "$INTERFACE", "nic_tag": "$NICTAG", "model": "$VIRTIO_E1000_RTL8139", "ip": "$IPADDRESS", "gateway": "$GATEWAY", "netmask": "$NETMASK", "primary": true}],
  "resolvers": ["$DNS_PRIMARY", "$DNS_SECONDARY"],
  "disks": [{"boot": $BOOTABLE,"model": "$DISK_MODEL","size": $DISK_IN_MB,"compression": "$COMPRESSION"}],
  "vcpus": "$VCPU",
  "ram": $RAM_IN_MB,
  "autoboot": $AUTO_BOOT,
  "alias": "$ALIAS",
  "brand": "kvm"
}
EOF

}


function create_vm_spec_kvm_image_import(){

  # Required:
  # $importedUUID

  # Create KVM VM from Imported Image
  vmadm create << EOF
{
  "brand": "kvm",
  "resolvers": ["$DNS_PRIMARY","$DNS_SECONDARY"],
  "ram": "$RAM",
  "max_locked_memory": "$RAM_MAX",
  "vcpus": "$VCPU",
  "nics": [
    {
      "nic_tag": "admin",
      "model": "virtio",
      "ip": "dhcp",
      "primary": true
    }
  ],
  "disks": [
    {
      "image_uuid": "$importedUUID",
      "boot": true,
      "model": "virtio"
    }
  ]
}
EOF

}




# MAIN

pre_check

echo "How would you like to create your VM today?"
select TYPE in "Just the simple essentials!" "I want to see all the options!"; do
    case $TYPE in
        "Just the simple essentials!") _EasyTiger EASY
        # Choose VM type
        # Choose DHCP or Static, nic tag
        #
        ;;
        "I want to see all the options!") _EasyTiger HARD
        # Choose VM type
        # Choose DHCP or Static, phys, nic tag, interface, etherstub, vnic
        #  - all ipadm ifprop, addrprop, and prop
        #
        ;;
    esac
done
